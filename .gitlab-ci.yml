# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  TEST_IMAGE_NAME_WITHOUT_TAG: "192.168.1.98/channel-test/flask-demo"
  PROD_IMAGE_NAME_WITHOUT_TAG: "192.168.1.98/channel-prod/flask-demo"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

before_script:
  - echo "docker login 192.168.1.98"
  - docker login 192.168.1.98


build-test-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - IMAGE_TAG="$(date +%Y%m%d%H%M%S)"
    - echo $IMAGE_TAG
    - IMAGE_NAME=$TEST_IMAGE_NAME_WITHOUT_TAG:$IMAGE_TAG
    - echo $IMAGE_NAME
    - docker build -t $IMAGE_NAME .
    # - docker tag $VERSION
    - docker push $IMAGE_NAME
    - docker tag $IMAGE_NAME $TEST_IMAGE_NAME_WITHOUT_TAG:latest
    - docker push $TEST_IMAGE_NAME_WITHOUT_TAG:latest
  allow_failure: false
  tags:
    - kf-test
  rules:
    - if: $CI_COMMIT_BRANCH == "test"
      when: always


unit-test-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 10
    - echo "Code coverage is 90%"
  tags:
    - kf-test
  rules:
    - if: $CI_COMMIT_BRANCH == "test"
      when: always

deploy-test-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  tags:
    - kf-test
  rules:
    - if: $CI_COMMIT_BRANCH == "test"
      when: always




build-prod-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
  allow_failure: false
  tags:
    - kf-prod
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual


unit-prod-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 10
    - echo "Code coverage is 90%"
  tags:
    - kf-prod
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always



deploy-prod-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  tags:
    - kf-prod
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
